; 2.64

(load "2_63.rkt")

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(quotient (- 2 1) 2)
(list->tree (list 1 3 5 7 9 11))

#|
步骤带换:

(list->tree (list 1 3 5 7 9 11)

(partial-tree (list 1 3 5 7 9 11) (length (list 1 3 5 7 9 11)))

(partial-tree (list 1 3 5 7 9 11) 6)

(left-size (quotient (- 6 1) 2))
(left-size 2)

(left-result (partial-tree (list 1 3 5 7 9 11) left-size))
(left-result (partial-tree (list 1 3 5 7 9 11) 2))
(left-result (left-size (quotient (- 2 1) 2)))
(left-result (left-size 0)
             (left-result (partial (list 1 3 5 7 9 11) 0))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree (car left-result))
             (non-left-elts (cdr left-result))
             (right-size (- 2 (+ left-size 1))))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry (car non-left-elts))
             (right-result (partial-tree (cdr non-left-elts)
                                         (right-size))))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry 1)
             (right-result (partial-tree (3 5 7 9 11)
                                         1)))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry 1)
             (right-result (left-size (quotient (- 1 1) 2))
                           (left-result (partial-tree (3 5 7 9 11)
                                                       left-size))))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry 1)
             (right-result (left-size 0)
                           (left-result ('() 3 5 7 9 11))
                           (left-tree (car left-result))
                           (non-left-elts (cdr left-result))
                           (right-size (- 1 (+ left-size 1)))))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry 1)
             (right-result (left-size 0)
                           (left-result ('() 3 5 7 9 11))
                           (left-tree '())
                           (non-left-elts (3 5 7 9 11))
                           (right-size 0)
                           (this-entry (car non-left-elts))
                           (reght-result (partial-tree (cdr non-left-elts)
                                                        left-size))))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry 1)
             (right-result (left-size 0)
                           (left-result ('() 3 5 7 9 11))
                           (left-tree '())
                           (non-left-elts (3 5 7 9 11))
                           (right-size 0)
                           (this-entry 3)
                           (reght-result (partial-tree (5 7 9 11)
                                                        0))))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry 1)
             (right-result (left-size 0)
                           (left-result ('() 3 5 7 9 11))
                           (left-tree '())
                           (non-left-elts (3 5 7 9 11))
                           (right-size 0)
                           (this-entry 3)
                           (reght-result ('() 5 7 9 11))
                           (right-tree (car right-result))
                           (remaining-elts (cdr right-result))))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry 1)
             (right-result (left-size 0)
                           (left-result ('() 3 5 7 9 11))
                           (left-tree '())
                           (non-left-elts (3 5 7 9 11))
                           (right-size 0)
                           (this-entry 3)
                           (reght-result ('() 5 7 9 11))
                           (right-tree '())
                           (remaining-elts (5 7 9 11))
                           (cons (make-tree 3 '() '()) (5 7 9 11)))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry 1)
             (right-result (3 '() '()) 5 7 9 11)
             (right-tree (car right-result))
             (remaining-elts (cdr right-result)))
(left-result (left-size 0)
             (left-result ('() 1 3 5 7 9 11)
             (left-tree '())
             (non-left-elts (1 3 5 7 9 11))
             (right-size 1)
             (this-entry 1)
             (right-result ((3 '() '()) 5 7 9 11)
             (right-tree (3 '() '()))
             (remaining-elts (5 7 9 11))
             (cons (make-tree 1 '() (3 '() '())) (5 7 9 11)))
(left-result ((1 '() (3 '() '())) 5 7 9 11))

(left-tree (car left-result))
(left-tree (1 '() (3 '() '())))

(non-left-elts (cdr left-result))
(non-left-elts (5 7 9 11))

(right-size (- 6 (+ left-size 1)))
(right-size 3)

(this-entry (car non-left-elts))
(this-entry 5)

(right-result (partial-tree (cdr non-left-elts)
                            right-size))
(right-result (partial-tree (7 9 11) 3))
(right-result (left-size (quotient (- n 1) 2)
              (left-result (partial-tree elts left-size))))
(right-result (left-size 1)
              (left-result (partial-tree (7 9 11) 1))))
(right-result (left-size 1)
              (left-result (left-size 0)
                           (left-result ('() 7 9 11)))
(right-result (left-size 1)
              (left-result (left-size 0)
                           (left-result ('() 7 9 11))
                           (left-tree '())
                           (non-left-elts (7 9 11))
                           (right-size 0)
                           (this-entry 7)
                           (right-result ('() 9 11))
                           (right-tree '())
                           (remaining-elts (9 11))
                           (cons (make-tree 7 '() '()) (9 11)))
(right-result (left-size 1)
              (left-result ((7 '() '()) 9 11))

|#

; 步数为 n